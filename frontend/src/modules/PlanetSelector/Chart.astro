---
interface Props {
  planet?: "mars" | "moon";

}
const { planet } = Astro.props;
---

<style>
  
</style>
<script>
  import Chart from "chart.js/auto";
  import luna from "../../assets/luna/xa.s12.00.mhz.1969-12-16HR00_evid00006.json";
  import luna1 from "../../assets/luna/xa.s12.00.mhz.1970-05-20HR00_evid00026.json";
  import luna2 from "../../assets/luna/xa.s12.00.mhz.1970-05-23HR00_evid00027.json";
  import luna3 from "../../assets/luna/xa.s12.00.mhz.1970-07-27HR00_evid00039.json";
  import luna4 from "../../assets/luna/xa.s12.00.mhz.1970-09-09HR00_evid00043.json";
  import luna5 from "../../assets/luna/xa.s12.00.mhz.1971-01-05HR00_evid00059.json";
  import luna6 from "../../assets/luna/xa.s12.00.mhz.1971-03-15HR00_evid00073.json";
  // import luna7 from "../../assets/luna/";
  // import luna8 from "../../assets/luna";
  // import luna9 from "../../assets/luna";
  // import luna10 from "../../assets/luna";
  // import luna11 from "../../assets/luna";
  // import luna12 from "../../assets/luna";
  // import luna13 from "../../assets/luna";
  // import luna14 from "../../assets/luna";
  // import luna15 from "../../assets/luna";
  // import luna16 from "../../assets/luna"";
  // import luna17 from "../../assets/luna";
  // import luna18 from "../../assets/luna";
  // import luna19 from "../../assets/luna";
  // import luna20 from "../../assets/luna";
  // import luna21 from "../../assets/luna";
  // import luna22 from "../../assets/lunav;
  // import luna23 from "../../assets/luna";
  // import luna24 from "../../assets/luna"";
  // import luna25 from "../../assets/luna";
  // import luna26 from "../../assets/luna";
  // import luna27 from "../../assets/luna";
  // import luna28 from "../../assets/luna";
  // import luna29 from "../../assets/lunav;
  // import luna30 from "../../assets/luna"";
  // import luna2 from "../../assets/lunvva;
  // import luna2 from "../../assets/luna"";
  // import luna2 from "../../assets/luna"";
  // import luna2 from "../../assets/luna";
  // import luna2 from "../../assets/luna";
  // import luna2 from "../../assets/luna";



  let chartInstance: Chart | null = null;

  const options = { 
    luna: {
      luna: luna,
      luna1: luna1,
      luna2: luna2,
      luna3: luna3,
      luna4: luna4,
      luna5: luna5,
      luna6: luna6,
    },
    marte: {
      marte1: "marte1",
    },
  };

  const lunaOptions = Object.keys(options.luna);
  let selectedOption = options.luna.luna1;

  function handleSelectChange(event: Event) {
    const selectElement = event.target as HTMLSelectElement;
    const selectedValue = selectElement.value;
    // @ts-ignore
    selectedOption = options.luna[selectedValue];
    updateChart();
  }

  function updateChart() {
    const lineCanvas = document.getElementById("myChart") as HTMLCanvasElement | null;

    if (lineCanvas) {
      const ctx = lineCanvas.getContext("2d");

      if (ctx) {
        // Destruir el gráfico anterior si existe
        if (chartInstance) {
          chartInstance.destroy();
        }

        const config: any = {
          type: "line",
          data: {
            labels: selectedOption.time,
            datasets: [
              {
                label: "Luna",
                data: selectedOption.vel,
                fill: false,
                borderColor: "rgba(255, 99, 132, 1)",
                pointRadius: 0,
              },
            ],
          },
          options: {
            responsive: true,
            plugins: {
              title: {
                display: true,
                text: "Seismic Luna",
              },
            },
          },
          plugins: [
            {
              afterDraw: (chart: any) => {
                const ctx = chart.ctx;
                const xAxis = chart.scales.x;
                const yAxis = chart.scales.y;

                const sismoStart = selectedOption.time.findIndex(
                  (time: number) => time === selectedOption.sismo_start
                );
                const sismoEnd = selectedOption.time.findIndex(
                  (time: number) => time === selectedOption.sismo_end
                );
                const indices = [sismoStart, sismoEnd];

                if (indices.length > 0 && xAxis) {
                  indices.forEach((index: number) => {
                    const xValue = selectedOption.time.find(
                      (time: number) => time >= index
                    );

                    if (xValue !== undefined) {
                      const pixelPosition = xAxis.getPixelForValue(xValue);
                      ctx.save();
                      ctx.beginPath();
                      ctx.moveTo(pixelPosition, yAxis.top);
                      ctx.lineTo(pixelPosition, yAxis.bottom);
                      ctx.strokeStyle = "red";
                      ctx.lineWidth = 2;
                      ctx.stroke();
                      ctx.restore();
                    }
                  });
                }
              },
            },
          ],
        };

        // Crear una nueva instancia del gráfico y guardarla
        chartInstance = new Chart(ctx, config);
      }
    }
  }

  const selectElement = document.getElementById("slct") as HTMLSelectElement;

  lunaOptions.forEach((optionKey) => {
    const optionElement = document.createElement("option");
    optionElement.value = optionKey;
    optionElement.textContent = optionKey;
    selectElement.appendChild(optionElement);
  });

  selectElement.addEventListener("change", handleSelectChange);

  updateChart();
</script>

